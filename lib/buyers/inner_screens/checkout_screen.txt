import 'package:flutter/material.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';
import 'package:provider/provider.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

import '../providers/cart_provider.dart';

class CheckOutScreen extends StatefulWidget {
  const CheckOutScreen({
    super.key,
  });

  @override
  State<CheckOutScreen> createState() => _CheckOutScreenState();
}

class _CheckOutScreenState extends State<CheckOutScreen> {
  String selectedPaymentMethod = '';
  late Map<String, dynamic> data;

  @override
  void initState() {
    super.initState();
    data =
        {}; // Initialize data as an empty map or with the appropriate default values
  }

  Future<void> saveOrderToServer() async {
    const url = 'YOUR_SERVER_BASE_URL/orders'; // Replace with your server URL
    final headers = {
      'Content-Type': 'application/json',
    };

    final orderData = {
      // Provide the necessary order data here
    };

    try {
      final response = await http.post(
        Uri.parse(url),
        headers: headers,
        body: jsonEncode(orderData),
      );

      if (response.statusCode == 200) {
        // Order created successfully
        await handlePayment();
      } else {
        // Handle error
        EasyLoading.showError('Order creation failed. Please try again.');
      }
    } catch (error) {
      // Handle network or server error
      EasyLoading.showError('Network error. Please check your connection.');
    }
  }

  Future<void> handlePayment() async {
    if (selectedPaymentMethod == 'Stripe') {
      // Call your function for Stripe payment here
      await makeStripePayment();
    } else {
      // Handle other payment methods if needed
    }
  }

  Future<void> makeStripePayment() async {
    const url = 'YOUR_SERVER_BASE_URL/payment'; // Replace with your server URL
    final headers = {
      'Content-Type': 'application/json',
    };

    final paymentData = {
      'tokenId': 'YOUR_STRIPE_TOKEN', // Replace with the actual Stripe token
      'amount': _cartProvider.totalPrice.toString(),
    };

    try {
      final response = await http.post(
        Uri.parse(url),
        headers: headers,
        body: jsonEncode(paymentData),
      );

      if (response.statusCode == 200) {
        // Payment successful
        await saveOrderToServer();
      } else {
        // Handle error
        EasyLoading.showError('Payment failed. Please try again.');
      }
    } catch (error) {
      // Handle network or server error
      EasyLoading.showError('Network error. Please check your connection.');
    }
  }

  @override
  Widget build(BuildContext context) {
    _cartProvider = Provider.of<CartProvider>(context);

    return Scaffold(
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.yellow.shade900,
        title: const Text(
          'Check Out',
          style: TextStyle(
              fontSize: 18, fontWeight: FontWeight.bold, letterSpacing: 6),
        ),
      ),
      body: ListView.builder(
        shrinkWrap: true,
        itemCount: _cartProvider.getCartItem.length,
        itemBuilder: (context, index) {
          final cartData = _cartProvider.getCartItem.values.toList()[index];

          return SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(10.0),
              child: Card(
                child: SizedBox(
                  height: 230,
                  child: Row(
                    children: [
                      SizedBox(
                        height: 100,
                        width: 100,
                        child: Image.network(cartData.imageUrList[0]),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(15.0),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              cartData.productName,
                              style: const TextStyle(
                                  fontSize: 20,
                                  fontWeight: FontWeight.bold,
                                  letterSpacing: 4),
                            ),
                            Text(
                              '\$${cartData.price.toStringAsFixed(2)}',
                              style: TextStyle(
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                                letterSpacing: 4,
                                color: Colors.yellow.shade900,
                              ),
                            ),
                            Text(
                              'Qnty   ${cartData.quantity}',
                              style: TextStyle(
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                                color: Colors.yellow.shade900,
                              ),
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                OutlinedButton(
                                  onPressed: null,
                                  child: Text(
                                    cartData.productSize,
                                    style: const TextStyle(color: Colors.black),
                                  ),
                                ),
                                OutlinedButton(
                                  onPressed: null,
                                  child: Text(
                                    cartData.productColor,
                                    style: const TextStyle(color: Colors.black),
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          );
        },
      ),
      bottomSheet: data['address'] == ''
          ? TextButton(
              onPressed: () {
                // Navigate to edit profile screen
                // ...
              },
              child: const Text(
                'Enter your Billing Address',
                style: TextStyle(fontSize: 20),
              ),
            )
          : Padding(
              padding: const EdgeInsets.all(8.0),
              child: InkWell(
                onTap: () async {
                  // Save order to server and initiate payment
                  await saveOrderToServer();
                },
                child: Container(
                  height: 50,
                  width: double.infinity,
                  decoration: BoxDecoration(
                    color: Colors.yellow.shade900,
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: const Center(
                    child: Text(
                      'PRESS ORDER ',
                      style: TextStyle(
                        color: Colors.white,
                        letterSpacing: 4,
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
              ),
            ),
    );
  }
}
