import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:fyoona/buyers/views/main_screen.dart';
import 'package:provider/provider.dart';
import '../../inner_screens/checkout_screen.dart';

import '../../providers/cart_provider.dart';
import '../../providers/user_provider.dart';

class CartScreen extends StatefulWidget {
  const CartScreen({super.key});

  @override
  State<CartScreen> createState() => _CartScreenState();
}

class _CartScreenState extends State<CartScreen> {
  late Map<String, dynamic> cartData;

  @override
  void initState() {
    super.initState();
    _fetchUserCarts();
  }

  // Declare a variable to hold the cart data
  List<dynamic> cartList = [];

  Future<void> _fetchUserCarts() async {
    try {
      final CartProvider cartProvider =
          Provider.of<CartProvider>(context, listen: false);
      final List<dynamic> fetchedCartList =
          await cartProvider.fetchUserCarts(context);

      if (fetchedCartList.isNotEmpty) {
        // Update the state variable with the fetched cart data

        setState(() {
          cartList = fetchedCartList;
        });
      } else {
        // Handle case when the cart list is empty
        print('Empty cart list');
      }
    } catch (error) {
      print('Error fetching user carts: $error');
    }
  }

  @override
  Widget build(BuildContext context) {
    // ignore: no_leading_underscores_for_local_identifiers
    final CartProvider cartProvider = Provider.of<CartProvider>(context);

    final user = Provider.of<UserProvider>(context, listen: false).user;

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.yellow.shade900,
        elevation: 0,
        title: const Text(
          'Shopping Cart',
          style: TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
            letterSpacing: 4,
          ),
        ),
      ),
      body: cartList.isNotEmpty
          ? ListView.builder(
              shrinkWrap: true,
              itemCount: cartList.length, // Use cartList.length here
              itemBuilder: (context, index) {
                final cartData =
                    cartList[index]; // Access the individual item in the list

                // Check if the cart item belongs to the current user

                if (cartData['buyersId'] == user.id) {
                  return SingleChildScrollView(
                    child: Card(
                      child: SizedBox(
                        height: 200,
                        child: Row(
                          children: [
                            SizedBox(
                              height: 100,
                              width: 100,
                              child: Image.network(cartData['products'][0]
                                  ['imageUrList'][0]), 
                            ),
                            Padding(
                              padding: const EdgeInsets.all(15.0),
                              child: Column(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceEvenly,
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    cartData['products'][0]['productName'],
                                    style: const TextStyle(
                                      fontSize: 20,
                                      fontWeight: FontWeight.bold,
                                      letterSpacing: 4,
                                    ),
                                  ),
                                  Text(
                                    // ignore: prefer_interpolation_to_compose_strings
                                    '\$' +
                                        cartData['products'][0]['price']
                                            .toStringAsFixed(2),
                                    style: TextStyle(
                                      fontSize: 20,
                                      fontWeight: FontWeight.bold,
                                      letterSpacing: 4,
                                      color: Colors.yellow.shade900,
                                    ),
                                  ),
                                  Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceBetween,
                                    children: [
                                      if (cartData['products'][0]
                                              ['productSize'] !=
                                          null)
                                        OutlinedButton(
                                          onPressed: null,
                                          child: Text(
                                            cartData['products'][0]
                                                ['productSize'],
                                            style: const TextStyle(
                                              color: Colors.black,
                                            ),
                                          ),
                                        ),
                                      if (cartData['products'][0]
                                              ['productColor'] !=
                                          null)
                                        OutlinedButton(
                                          onPressed: null,
                                          child: Text(
                                            cartData['products'][0]
                                                ['productColor'],
                                            style: const TextStyle(
                                                color: Colors.black),
                                          ),
                                        ),
                                    ],
                                  ),
                                  Row(
                                    children: [
                                      Container(
                                        height: 40,
                                        width: 130,
                                        decoration: BoxDecoration(
                                          color: Colors.yellow.shade900,
                                        ),
                                        child: Row(
                                          children: [
                                            IconButton(
                                              onPressed: cartData['products']
                                                          [index]['quantity'] ==
                                                      1
                                                  ? null
                                                  : () {
                                                      setState(() {
                                                        cartProvider.decreament(
                                                            cartData);
                                                      });
                                                    },
                                              icon: const Icon(
                                                CupertinoIcons.minus,
                                                color: Colors.white,
                                              ),
                                            ),
                                            Text(
                                              cartData['products'][0]
                                                      ['quantity']
                                                  .toString(),
                                              style: const TextStyle(
                                                  color: Colors.white),
                                            ),
                                            IconButton(
                                              onPressed: cartData['products']
                                                              [index]
                                                          ['productQnty'] ==
                                                      cartData['products']
                                                          [index]['quantity']
                                                  ? null
                                                  : () {
                                                      setState(() {
                                                        cartProvider.increament(
                                                            cartData);
                                                      });
                                                    },
                                              icon: const Icon(
                                                CupertinoIcons.plus,
                                                color: Colors.white,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                      IconButton(
                                          onPressed: () {
                                            setState(() {
                                              cartProvider.removeItemFromCart(
                                                  cartData['products'][0]
                                                      ['productId']);
                                            });
                                          },
                                          icon: const Icon(
                                              CupertinoIcons.cart_badge_minus))
                                    ],
                                  )
                                ],
                              ),
                            )
                          ],
                        ),
                      ),
                    ),
                  );
                } else {
                  // If the cart item doesn't belong to the user, return an empty container
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Text(
                          'Your Shopping Cart is Empty',
                          style: TextStyle(
                              fontSize: 22,
                              fontWeight: FontWeight.bold,
                              letterSpacing: 5),
                        ),
                        const SizedBox(
                          height: 20,
                        ),
                        Container(
                          height: 40,
                          width: MediaQuery.of(context).size.width - 40,
                          decoration: BoxDecoration(
                            color: Colors.yellow.shade900,
                            borderRadius: BorderRadius.circular(10),
                          ),
                          child: InkWell(
                            onTap: () {
                              Navigator.pushReplacement(context,
                                  MaterialPageRoute(builder: (context) {
                                return const MainScreen();
                              }));
                            },
                            child: const Center(
                              child: Text(
                                'CONTINUE SHOPPING',
                                style: TextStyle(
                                    fontSize: 18, color: Colors.white),
                              ),
                            ),
                          ),
                        )
                      ],
                    ),
                  );
                }
              },
            )
          : Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Text(
                    'Your Shopping Cart is Empty',
                    style: TextStyle(
                      fontSize: 22,
                      fontWeight: FontWeight.bold,
                      letterSpacing: 5,
                    ),
                  ),
                  const SizedBox(
                    height: 20,
                  ),
                  Container(
                    height: 40,
                    width: MediaQuery.of(context).size.width - 40,
                    decoration: BoxDecoration(
                      color: Colors.yellow.shade900,
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: InkWell(
                      onTap: () {
                        Navigator.pushReplacement(context,
                            MaterialPageRoute(builder: (context) {
                          return const MainScreen();
                        }));
                      },
                      child: const Center(
                        child: Text(
                          'CONTINUE SHOPPING',
                          style: TextStyle(fontSize: 18, color: Colors.white),
                        ),
                      ),
                    ),
                  )
                ],
              ),
            ),
      bottomSheet: Padding(
        padding: const EdgeInsets.all(8.0),
        child: InkWell(
          onTap: cartProvider.totalPrice == 0.00
              ? null
              : () {
                  Navigator.push(context, MaterialPageRoute(builder: (context) {
                    return const CheckOutScreen();
                  }));
                },
          child: Container(
            height: 50,
            width: double.infinity,
            decoration: BoxDecoration(
              color: cartProvider.totalPrice == 0.00
                  ? Colors.grey
                  : Colors.yellow.shade900,
              borderRadius: BorderRadius.circular(10),
            ),
            child: Center(
              child: Text(
                // ignore: prefer_interpolation_to_compose_strings
                '${'\$' + cartProvider.totalPrice.toStringAsFixed(2)}  CHECKOUT',
                style: const TextStyle(
                  color: Colors.white,
                  letterSpacing: 4,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
