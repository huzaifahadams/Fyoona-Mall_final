import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:fyoona_app/constants/error_handling.dart';
import 'package:fyoona_app/constants/global_variables.dart';
import 'package:fyoona_app/constants/utils.dart';
import 'package:fyoona_app/models/order.dart';
// import 'package:fyoona_app/models/product.dart';
import 'package:fyoona_app/providers/user_provider.dart';
import 'package:provider/provider.dart';
import 'package:http/http.dart' as http;

class AccountServices {
  Future<List<Order>> fetchMyOrders({
    required BuildContext context,
  }) async {
    final userProvider = Provider.of<UserProvider>(context, listen: false);
    List<Order> orderList = [];
    try {
      http.Response res = await http.get(
        Uri.parse('$uri/api/orders/me'),
        headers: {
          'Content-Type': 'application/json; charset=UTF-8',
          'x-auth-token': userProvider.user.token,
        },
      );
      //      headers: {
      //   'Content-Type': 'application/json; charset-UTF-8',
      //   'x-auth-token': userProvider.user.token,
      // });
      // ignore: use_build_context_synchronously
      httpErrorHandle(
        response: res,
        context: context,
        onSuccess: () {
          List<dynamic> jsonList = jsonDecode(res.body);
          orderList = jsonList
              .map((json) => Order.fromJson(json as Map<String, dynamic>))
              .toList();
        },
      );
    } on SocketException {
      showSnackBar(context, "Please check your internet connection.");
    } on TimeoutException {
      showSnackBar(context, "The request timed out. Please try again later.");
    } catch (e, stackTrace) {
      showSnackBar(context,
          "An error occurred while fetching products: ${e.toString()} \n Line number: ${stackTrace.toString().split('\n')[1]}");
    }
    return orderList;
  }
}

// class AccountServices {
//   Future<List<Order>> fetchMyOrders({
//     required BuildContext context,
//   }) async {
//     final userProvider = Provider.of<UserProvider>(context, listen: false);
//     List<Order> orderList = [];
//     try {
//       http.Response res =
//           await http.get(Uri.parse('$uri/api/orders/me'), headers: {
//         'Content-Type': 'application/json; charset-UTF-8',
//         'x-auth-token': userProvider.user.token,
//       });
//       // ignore: use_build_context_synchronously
//       httpErrorHandle(
//         response: res,
//         context: context,
//         onSuccess: () {
//           for (int i = 0; i < jsonDecode(res.body).length; i++) {
//             orderList.add(

//               Order.fromJson(
//                 jsonEncode(jsonDecode(res.body)[i]),
//               ),
//             );
//           }
//         },
//       );
//     } on SocketException {
//       showSnackBar(context, "Please check your internet connection.");
//     } on TimeoutException {
//       showSnackBar(context, "The request timed out. Please try again later.");
//     } catch (e, stackTrace) {
//       showSnackBar(context,
//           "An error occurred while fetching products: ${e.toString()} \n Line number: ${stackTrace.toString().split('\n')[1]}");

//       // "An error occurred while fetching products: ${e.toString()}");
//     }
//     return orderList;
//   }
// }

// import 'dart:async';
// import 'dart:convert';
// import 'dart:io';

// import 'package:flutter/material.dart';
// import 'package:fyoona_app/constants/error_handling.dart';
// import 'package:fyoona_app/constants/global_variables.dart';
// import 'package:fyoona_app/constants/utils.dart';
// import 'package:fyoona_app/models/order.dart';
// import 'package:fyoona_app/providers/user_provider.dart';
// import 'package:provider/provider.dart';
// import 'package:http/http.dart' as http;

// class AccountServices {
//   Future<List<Order>> fetchMyOrders({
//     required BuildContext context,
//   }) async {
//     // Get the UserProvider from the context
//     final userProvider = Provider.of<UserProvider>(context, listen: false);

//     // Create an empty list to hold the orders
//     List<Order> orderList = [];

//     try {
//       // Send an HTTP GET request to fetch the user's orders
//       http.Response res =
//           await http.get(Uri.parse('$uri/api/orders/me'), headers: {
//         'Content-Type': 'application/json; charset-UTF-8',
//         'x-auth-token': userProvider.user.token,
//       });

//       // Handle any errors that may occur during the HTTP request
//       // The onSuccess function will be called if the request is successful
//       // ignore: use_build_context_synchronously
//       httpErrorHandle(
//         response: res,
//         context: context,
//         onSuccess: () {
//           // Decode the JSON response and add each order to the orderList
//           for (int i = 0; i < jsonDecode(res.body).length; i++) {
//             orderList.add(Order.fromJson(jsonDecode(res.body)[i])

//                 // Order.fromJson(
//                 //   jsonEncode(jsonDecode(res.body)[i]),
//                 // ),
//                 );
//           }
//         },
//       );
//     } on SocketException {
//       // Handle a SocketException, which may occur if the user's internet connection is lost
//       showSnackBar(context, "Please check your internet connection.");
//     } on TimeoutException {
//       // Handle a TimeoutException, which may occur if the request takes too long to complete
//       showSnackBar(context, "The request timed out. Please try again later.");
//     } catch (e, stackTrace) {
//       // Handle any other errors that may occur during the request and include the line number where the error occurred
//       showSnackBar(context,
//           "An error occurred while fetching orders: ${e.toString()} \n Line number: ${stackTrace.toString().split('\n')[1]}");
//     }

//     // Return the list of orders
//     return orderList;
//   }
// }
